// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	domain "bank-service-app/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NasabahUsecase is an autogenerated mock type for the NasabahUsecase type
type NasabahUsecase struct {
	mock.Mock
}

// GetSaldo provides a mock function with given fields: noRekening
func (_m *NasabahUsecase) GetSaldo(noRekening string) (float64, error) {
	ret := _m.Called(noRekening)

	if len(ret) == 0 {
		panic("no return value specified for GetSaldo")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (float64, error)); ok {
		return rf(noRekening)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(noRekening)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noRekening)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: nama, nik, noHP
func (_m *NasabahUsecase) Register(nama string, nik string, noHP string) (*domain.Nasabah, error) {
	ret := _m.Called(nama, nik, noHP)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *domain.Nasabah
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*domain.Nasabah, error)); ok {
		return rf(nama, nik, noHP)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *domain.Nasabah); ok {
		r0 = rf(nama, nik, noHP)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Nasabah)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(nama, nik, noHP)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNasabahUsecase creates a new instance of NasabahUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNasabahUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *NasabahUsecase {
	mock := &NasabahUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
