// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TransaksiUsecase is an autogenerated mock type for the TransaksiUsecase type
type TransaksiUsecase struct {
	mock.Mock
}

// Tabung provides a mock function with given fields: noRekening, nominal
func (_m *TransaksiUsecase) Tabung(noRekening string, nominal float64) (float64, error) {
	ret := _m.Called(noRekening, nominal)

	if len(ret) == 0 {
		panic("no return value specified for Tabung")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, float64) (float64, error)); ok {
		return rf(noRekening, nominal)
	}
	if rf, ok := ret.Get(0).(func(string, float64) float64); ok {
		r0 = rf(noRekening, nominal)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string, float64) error); ok {
		r1 = rf(noRekening, nominal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tarik provides a mock function with given fields: noRekening, nominal
func (_m *TransaksiUsecase) Tarik(noRekening string, nominal float64) (float64, error) {
	ret := _m.Called(noRekening, nominal)

	if len(ret) == 0 {
		panic("no return value specified for Tarik")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, float64) (float64, error)); ok {
		return rf(noRekening, nominal)
	}
	if rf, ok := ret.Get(0).(func(string, float64) float64); ok {
		r0 = rf(noRekening, nominal)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string, float64) error); ok {
		r1 = rf(noRekening, nominal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransaksiUsecase creates a new instance of TransaksiUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransaksiUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransaksiUsecase {
	mock := &TransaksiUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
