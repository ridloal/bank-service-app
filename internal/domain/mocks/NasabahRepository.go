// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	domain "bank-service-app/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NasabahRepository is an autogenerated mock type for the NasabahRepository type
type NasabahRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: nasabah
func (_m *NasabahRepository) Create(nasabah *domain.Nasabah) error {
	ret := _m.Called(nasabah)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Nasabah) error); ok {
		r0 = rf(nasabah)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByNIK provides a mock function with given fields: nik
func (_m *NasabahRepository) GetByNIK(nik string) (*domain.Nasabah, error) {
	ret := _m.Called(nik)

	if len(ret) == 0 {
		panic("no return value specified for GetByNIK")
	}

	var r0 *domain.Nasabah
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Nasabah, error)); ok {
		return rf(nik)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Nasabah); ok {
		r0 = rf(nik)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Nasabah)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nik)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNoHP provides a mock function with given fields: noHP
func (_m *NasabahRepository) GetByNoHP(noHP string) (*domain.Nasabah, error) {
	ret := _m.Called(noHP)

	if len(ret) == 0 {
		panic("no return value specified for GetByNoHP")
	}

	var r0 *domain.Nasabah
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Nasabah, error)); ok {
		return rf(noHP)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Nasabah); ok {
		r0 = rf(noHP)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Nasabah)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noHP)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNoRekening provides a mock function with given fields: noRekening
func (_m *NasabahRepository) GetByNoRekening(noRekening string) (*domain.Nasabah, error) {
	ret := _m.Called(noRekening)

	if len(ret) == 0 {
		panic("no return value specified for GetByNoRekening")
	}

	var r0 *domain.Nasabah
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Nasabah, error)); ok {
		return rf(noRekening)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Nasabah); ok {
		r0 = rf(noRekening)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Nasabah)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noRekening)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNasabahRepository creates a new instance of NasabahRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNasabahRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NasabahRepository {
	mock := &NasabahRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
